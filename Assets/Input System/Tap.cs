//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Input System/Tap.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Tap : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Tap()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Tap"",
    ""maps"": [
        {
            ""name"": ""Tapaction"",
            ""id"": ""d3f721cd-4c4a-43e0-a92c-63fa60ea9a9b"",
            ""actions"": [
                {
                    ""name"": ""Tap"",
                    ""type"": ""Button"",
                    ""id"": ""5708cf0b-cd80-4863-a11f-6c0514f2a43f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""8ffa4f57-d768-4b04-9ee3-fb6f88b24edd"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Tap"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c43ac411-2fec-4acf-9183-4c546b723818"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Tap"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5a267b28-aafd-48cf-b9c4-b306d3543b15"",
                    ""path"": ""<Touchscreen>/Press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Tap"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Tapaction
        m_Tapaction = asset.FindActionMap("Tapaction", throwIfNotFound: true);
        m_Tapaction_Tap = m_Tapaction.FindAction("Tap", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Tapaction
    private readonly InputActionMap m_Tapaction;
    private ITapactionActions m_TapactionActionsCallbackInterface;
    private readonly InputAction m_Tapaction_Tap;
    public struct TapactionActions
    {
        private @Tap m_Wrapper;
        public TapactionActions(@Tap wrapper) { m_Wrapper = wrapper; }
        public InputAction @Tap => m_Wrapper.m_Tapaction_Tap;
        public InputActionMap Get() { return m_Wrapper.m_Tapaction; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(TapactionActions set) { return set.Get(); }
        public void SetCallbacks(ITapactionActions instance)
        {
            if (m_Wrapper.m_TapactionActionsCallbackInterface != null)
            {
                @Tap.started -= m_Wrapper.m_TapactionActionsCallbackInterface.OnTap;
                @Tap.performed -= m_Wrapper.m_TapactionActionsCallbackInterface.OnTap;
                @Tap.canceled -= m_Wrapper.m_TapactionActionsCallbackInterface.OnTap;
            }
            m_Wrapper.m_TapactionActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Tap.started += instance.OnTap;
                @Tap.performed += instance.OnTap;
                @Tap.canceled += instance.OnTap;
            }
        }
    }
    public TapactionActions @Tapaction => new TapactionActions(this);
    public interface ITapactionActions
    {
        void OnTap(InputAction.CallbackContext context);
    }
}
